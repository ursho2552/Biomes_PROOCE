function [ classes , net] = My_SOM( No_nan_data, dimension1, dimension2, ep,dist_metric)
%This function creates, trains and applies a SOM to your data (No_nan_data)
%it returns the associated classes (i.e. the labels of the BMUs) and the
%network itself.

%Parameters:
%     No_nan_data (matrix): Complete data of observations and features
%     dimensionX (int): Number of columns and rows in the neuron lattice
%     ep (int) : Number of epochs to train the Self-organizing map
%     dist_metric (str): Metric used to calculate distance between neurons
 
% Output
%     classes (vector): Vector containing the class labels for each observations
%     net (SOM object): Trained Self-organizing map

%ensure that the data is 2D
No_nan_data = squeeze(No_nan_data);

%Only use the data without lon, lat, month, ID
x = No_nan_data(:,5:end-1);
%transpose to get the correct structure for the MA
x =  x';

dimensions = [dimension1 dimension2];
net = selforgmap(dimensions);
%net.inputWeights{1,1}.weightFcn = 'dist';
net.layers{1}.distanceFcn = dist_metric;
net.trainParam.epochs = ep;
% net.performFcn = 'mae';
% Train the Network
[net,tr] = train(net,x);

% Test the Network
y = net(x);

% View the Network
%view(net)

classes = vec2ind(y); %get the neuron number/class

%x = [x;classes]; %append the corresponding class to the observation
%x = x';
classes = classes';

end
%check Pavel Stefanoviƒç and Olga Kurasova
